10 A CLOSER LOOK AT functions

DEFAULT PARAMETRI:
Pre dolazka ES6 koristili bi short circuiting da dodelimo neku vrednost parametru ukoliko on nije definisan (tj undefined) ali sa dolazkom ES6 sada to mozemo uciniti odmah gde pisemo parametre jednostavnim dodeljivanjem vrednost preko = operatora. Za default vrednosti parametara mozemo da pisemo bilo koji expression pa cak mozemo da koristimo i druge parametre ali samo one koji su definisani pre tog kom dodeljujemo vrednosti. 
Kada pozivamo funkciju i krenemo da prosledjujemo argumente (koje cemo da koristimo preko parametara gde smo definisali funkciju) ne mozemo da preskacemo argumente, npr funkcija prima tri parametara a mi da definisemo prvi i treci a da izostavimo drugi. To nije moguce jer js mapira prvi argument sa prvim parametrom, drugi argument sa drugim parametrom i tako dalje... Jedan zgodan trik ako hocemo vec da izostavimo vrednost nekog parametara (ili jednostavno hocemo da se ucita njegova default vrednost) mozemo da mu prosledimo vrednost undefined, to je isto kao da nismo prosledili nista za taj parametar.


FIRST-CLASS AND HIGHER-ORDER FUNCTIONS:
Javascript je jezik koji poseduje first class functions, sto u tehnickom prevodu znaci da su funkcije first-class citizens. To u praski znaci da su funkcije tretirane isto kao obicne vrednosti. Zasto javascript funkcionise ovako? Pa zato sto su funkcije samo jos jedan tip objekta. A posto su objekti vrednosti i funkcije su vrednosti. Posto su funkcije vrednosti mozemo da radimo svakakve stvari sa njima kao npr da ih skladistimo u promenljive ili cak u svojstva objekta (kao metode). Takodje mozemo da prosledjujemo funkcije kao argumente drugim funkcijama. Npr kada pozovemo addEventListener funkciju nad nekim DOM elementom i onda kao drugi argument te addEventListener funkcije prosledimo funkciju. Jos jedna jako mocna stvar u js-u jeste sto mozemo da vracamo funkcije iz neke funkcije.
Posto smo rekli da su funkcije zapravo jos jedan tip objekta, to znaci da i funkcije mogu da imaaju metode koje mozemo da pozivamo nad njima (bind, apply...).
Posto javascript ima first-class functions to nam omogucava da pisemo higher-order functions. Higher order funkcija je ili funkcija koja prima drugu funkciju kao argument ili je funkcija koja vraca drugu funkciju. Prvi slucaj funkicije koja prima drugu funckiju kao argument jeste upravo ista metoda koju smo gore spomenuli addEventListener. Dakle ona kao drugi argument prima call back funkijcu koja ce da se izvrsi kad se desi odredjeni event. Te funkcije koje prosledjujemo kao argumente drugim funkcijama obicno nazivamo callback funkcije. To prosto znaci da ce te callback funkcije da budu pozvane kasnije od strane higher-order funkcije. 
Drugi slucaj higher-order funkcije jeste kada funkcija vraca drugu funckiju. Primer:

function count() {
  let counter = 0;

  return function() {
    counter++
  }
}

U ovom slucaju count funkcije jeste higher-order funckija posto vraca drugu funkciju. 

Postoji dosta nejasnoca izmedju termina first-class functions i higher-order functions. Te dve stvari nisu iste, one znace razlicite stvari. First-class functions je samo feature koju neki programski jezik ili ima ili nema. Sve sto to znaci jeste da su funckije samo vrednosti. Ne postoje first-class funcions u praksi! Higher-order funcions postoje u praksi kao sto se vidi gore u primeru, a to je moguce zato sto je jezik podrzava first-class functions.


CLOSURES:
Ono sto je bitno na pocetku da kazemo da mi ne kreiramo manuelno closure, drugim recima to nije feature jezika. Closure se prosto desava automatski u odredjenim situacijama. Od nas se samo ocekuje da prepoznamo te situacije. Evo primera:

const secureBooking = function() {
  let passengerCount = 0;

  return function() {
    passengerCount++;
    console.log(passengerCount)
  }
}

const booker = secureBooking();

Kako ce se tacno izvrsiti ovaj kod u call stacku? Prvo se obrazuje globalni execution context. U njemu ce biti registravana secureBooking funkcija za sada. Kada dodjemo do linije koda gde je pozvana secureBooking funckija obrazuje se novi execution context za secureBooking funkciju. U njenom varijablnom okruzenju se nalazi passengerCount promenljiva, ali zbog scope chain-a ima pristup i roditeljskom scope sto je u ovom slucaju globalni execution context. Sledece sto se desava jeste da secureBooking funkcija vraca novu funkciju koju smo mi smesitli u booker promenljivu. Sada je i ta booker promenljiva registrovana u globanom execution contextu. Cim je secureBooking funkcija zavrsila izvrsavanje njen execution context odpada iz call stacka, dakle nema ga vise. Medjutim ako mi sada pozovemo booker funkciju par puta:

booker() // it return 1
booker() // it return 2
booker() // it return 3

...videcemo da booker funkcija nekako ima pristup passengerCount promenljivoj jer moze da je povecava. Ali kako je ovo moguce? Ako je execution context secureBooking funkicje opadao sa call stacka, plus booker funkcija je registrovana u globalnom execution contextu i ne moze da ima pristup unutrasnjim scopovima, jer scope chain funkcionise u kontra smeru (unutrasnje funckije ce uvek imate pristup roditeljskom scopu). Dakle rekli smo da booker funkcija nekako nastavlja da ima pristup passengerCount promenljivoj. To je upravo closure. Closure cini da funkcija pamti varijabalno okruzenje u kom je nastala. U ovom slucaju iznad booker funkcija je nastala u scope-u (opsegu) secureBooking funkcije sto znaci da ce vracena funkicja (booker) zauvek da ima pristup varijablnom okruzenju secureBooking funkcije iako je ona zavrisla svoje izvrsavanje i ne postji vise u call stack-u. Jos jednom mesto rodjenja booker funkcije je upravo varijablno okruzenje secureBooking funkcije. Sto znaci da ce booker funkcija zauvek da ima pristup svim promenljivama koje su se nalazile u scope-u secureBooking funkcije, u ovom slucaju passengerCount promenljive. Booker funkcija pamti sve promenljive u scopu u kom je nastala. 
Definicija closure-a bi isla ovako: Svaka funkcija ce imati pristup varijablnom okruzenju execution contexta u kom je funkcija nastala. Booker funkcija je nastala u execution contextu secureBooking funkcije, koji je odavno ispao sa call stack-a. Booker funkcija ce da ima pristup tom varijablnom okruzenju secureBooking funkcije preko closure-a. Na taj nacin ce booker funkcija da ima pristup passengerCount promenljivoj i moci ce da manipulise njom. Ova konekcija se naziva closure.
Closure u ovom slucaju jeste varijablno okruzenje koje je zakaceno za funkciju, bas kao sto je bilo u vreme kada je ova (booker) funkcija nastala. To varijablno okruzenje secureBooking funkcije ostaje sa booker funkcijom zauvek, tako da ce booker funkcija moci zauvek da koristi varijablno okruzenje secureBooking funkcije iako je njen execution context odavno nestao iz call stack-a. OVO ISTO VAZI I ZA ARGUMENTE. CLOSURES ima prednost u odnosu na scope chain, dakle ako bi se neka promenljiva passengerCount nasla u globalnom ospegu, booker funckija bi i dalje prvo koristila passengerCount iz closure-a. 
